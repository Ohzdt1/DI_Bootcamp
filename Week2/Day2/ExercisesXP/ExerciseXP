#ðŸŒŸ Exercise 1 : Pets
class Pets():
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())

class Cat():
    is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'

class Bengal(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Siamese(Cat):
    def sing(self, sounds):
        return f'{sounds}'
    

all_cats = [Bengal("Shere Khan", 5), Chartreux("Cheshire", 6), Siamese("Indigo", 3)]

sara_pets = Pets(all_cats)

sara_pets.walk()


#ðŸŒŸ Exercise 2 : Dogs
class Dog:
    def __init__(self, name, age, weight):
        self.name = name
        self.age = age
        self.weight = weight

    def bark(self):
        print(f"{self.name} is barking")
    
    def run_speed(self):
        return (self.weight / self.age) * 10 
    
    def fight(self, other_dog):
        dogcr = self.run_speed() * self.weight
        otherdogcr = other_dog.run_speed() * other_dog.weight 

        if dogcr > otherdogcr:
            return f"{self.name} wins the fight!"
        
        elif otherdogcr > dogcr:
            return f"{other_dog.name} wins the fight!"
        else:
            return "it's a tie!" 

dog1 = Dog("Buddy", 3, 20)
dog2 = Dog("Max", 5, 30)
dog3 = Dog("Rex", 4, 25)

dog1.bark()
dog2.bark()

print(dog1.fight(dog2))
print(dog1.fight(dog3))  



#Exercise 4 : Family

class Family():
    def __init__(self, last_name, members):
        self.last_name = last_name
        self.members = members
        
    
    def born(self, **kwargs):
        print("Congrats on the new member of the family!")
        self.members.append(kwargs)

    def is_18(self, name):
            for member in self.members:
                if member["name"] == name:
                    return member["age"] >= 18
            return False
                
    def family_presentation (self):
        print(f"This Family's Name is {self.last_name}")
        for member in self.members:
            print(f"Name: {member['name']}, Age: {member['age']}, Gender: {member['gender']}, Is Child: {member['is_child']}")


my_family = Family ("Rajs", [
    {'name': 'Pinjas', 'age': 37, 'gender': 'Male', 'is_child': False},
    {'name': 'Michelle', 'age': 33, 'gender': 'Female', 'is_child': False},
    {'name': 'Netanel', 'age': 11, 'gender': 'Male', 'is_child': True},
    {'name': 'Sheina', 'age': 9, 'gender': 'Female', 'is_child': True},
    {'name': 'Talia', 'age': 3, 'gender': 'Female', 'is_child': True}
    ])


my_family.born(name='Yakov', age=1, gender='Male', is_child=True)

print(my_family.is_18('Pinjas'))
print(my_family.is_18('Michelle'))
print(my_family.is_18('Netanel'))
print(my_family.is_18('Sheina'))
print(my_family.is_18('Talia'))
print(my_family.is_18('Yakov'))

my_family.family_presentation()


#Exercise 5 : TheIncredibles Family

class TheIncredibles(Family):
    def __init__(self, last_name, members):
        super().__init__(last_name, members)

    def use_power(self, name):
        for member in self.members:
            if member["name"] == name:
                if member["age"] >= 18:
                    print(f"{member['name']} can {member['power']}!")
                else:
                    raise Exception(f"{member['name']} is not over 18 years old!")
    
    def incredible_presentation(self):
            print("*Here is our powerful family*")
            super().family_presentation()
            for member in self.members:
                print(f"Incredible Name: {member['incredible_name']}, Power: {member['power']}")

    

incredibles_family = TheIncredibles("Incredibles", [
    {'name': 'Michael', 'age': 35, 'gender': 'Male', 'is_child': False, 'power': 'fly', 'incredible_name': 'MikeFly'},
    {'name': 'Sarah', 'age': 32, 'gender': 'Female', 'is_child': False, 'power': 'read minds', 'incredible_name': 'SuperWoman'}
])

incredibles_family.incredible_presentation()

incredibles_family.born(name='Baby Jack', age=1, gender='Male', is_child=True, power='Unknown Power', incredible_name='BabyJack')

incredibles_family.incredible_presentation()    

